{"version":3,"sources":["App.tsx","pages/CV.tsx","pages/Binaural.tsx","pages/Caleidonote.tsx","pages/Intro.tsx","serviceWorker.js","index.js"],"names":["Section","CV","react","React","Binaural","Caleidonote","Intro","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","section","INTRO","sideBarExpanded","newSection","setState","el","_this2","CALEIDONOTE","pages_Caleidonote","BINAURAL","pages_Binaural","pages_CV","pages_Intro","buttons","keys","forEach","key","val","className","push","onClick","event","switchTo","sideBarClass","expandButton","map","bt","toggleCollapse","fa","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8IASKA,6ECAUC,0LAJP,OAAOC,EAAA,2CAHEC,cCOFC,mLAJP,OAAOF,EAAA,iDAHQC,aCORE,mLAJP,OAAOH,EAAA,oDAHWC,aC6BXG,mLA3BP,OAAQJ,EAAA,yBACJA,EAAA,oCAGAA,EAAA,yGAC+EA,EAAA,yBAD/E,wIAGmCA,EAAA,yBAHnC,iFAI8EA,EAAA,yBAJ9E,2MAO0BA,EAAA,yBAP1B,2VAUuGA,EAAA,yBACvGA,EAAA,yBAXA,gHAY6GA,EAAA,yBAC7GA,EAAA,yBAbA,6FAc0FA,EAAA,yBAC1FA,EAAA,yBAfA,UAgBOA,EAAA,yBAhBP,gCANQC,8BJOfH,+FAyFUO,cA3Eb,SAAAA,EAAYC,GACZ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACEE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,QAASjB,EAAQkB,MAAOC,iBAAiB,GAFzDV,wEAMUW,GAGRR,KAAKS,SAAS,CAACJ,QAASG,6CAKxBR,KAAKS,SAAS,CAACF,iBAAkBP,KAAKI,MAAMG,mDAGrC,IAEHG,EAFGC,EAAAX,KAIP,OAAQA,KAAKI,MAAMC,SAEjB,KAAKjB,EAAQwB,YACXF,EAAKpB,EAAA,cAACuB,EAAD,MACL,MACF,KAAKzB,EAAQ0B,SACXJ,EAAKpB,EAAA,cAACyB,EAAD,MAAa,MACpB,KAAK3B,EAAQC,GACXqB,EAAKpB,EAAA,cAAC0B,EAAD,MACL,MACF,KAAK5B,EAAQkB,MACXI,EAAKpB,EAAA,cAAC2B,EAAD,MAIT,IAAIC,EAAkB,GACtBpB,OAAOqB,KAAK/B,GAASgC,QAAS,SAAAC,GAC1B,IAAIC,EAAMlC,EAAQiC,GACdE,EAAY,iBACZD,GAAOX,EAAKP,MAAMC,UAEpBkB,GAAa,YAEfL,EAAQM,KACNlC,EAAA,mBAAG+B,IAAKA,EAAKE,UAAWA,EAAWE,QAAU,SAACC,GAAD,OAAgBf,EAAKgB,SAASL,KAASA,MAK1F,IAAIM,EAAe,UACfC,EAAe,sBAMnB,OALK7B,KAAKI,MAAMG,kBAEdqB,GAAgB,aAChBC,GAAgB,oBAGhBvC,EAAA,qBAAKiC,UAAU,YACbjC,EAAA,qBAAKiC,UAAWK,GACdtC,EAAA,oBAAIiC,UAAU,WAAd,QACCL,EAAQY,IAAI,SAAAC,GAAE,OAAIA,KAErBzC,EAAA,qBAAKiC,UAAU,WACfjC,EAAA,mBAAGiC,UAAWM,EAAcJ,QAAU,SAACC,GAAD,OAAgBf,EAAKqB,mBACtDhC,KAAKI,MAAMG,gBAAkBjB,EAAA,cAAC2C,EAAA,EAAD,MAAe3C,EAAA,cAAC2C,EAAA,EAAD,OAEhDvB,WArESnB,aKVE2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c3e1bcd4.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport './App.css';\r\nimport { string } from 'prop-types';\r\nimport CV from './pages/CV';\r\nimport Binaural from './pages/Binaural';\r\nimport Caleidonote from './pages/Caleidonote';\r\nimport Intro from './pages/Intro';\r\nimport { FaAngleLeft, FaAngleRight } from 'react-icons/fa';\r\n\r\nenum Section\r\n{\r\n  INTRO = \"Intro\",\r\n  CALEIDONOTE = \"Caleidonote\",\r\n  BINAURAL = \"Binaural\",\r\n  CV = \"CV\" \r\n}\r\n\r\ntype AppStatus = {\r\n  section: Section,\r\n  sideBarExpanded: boolean\r\n}\r\n\r\nclass App extends React.Component<{}, AppStatus> {\r\n  constructor(props: any)\r\n  {\r\n    super(props);\r\n    this.state = {section: Section.INTRO, sideBarExpanded: true};\r\n  }\r\n  \r\n\r\n  switchTo (newSection: Section) \r\n  {\r\n    //console.log(\"switching to :\" + newSection);\r\n    this.setState({section: newSection});\r\n  }\r\n\r\n  toggleCollapse () \r\n  {\r\n    this.setState({sideBarExpanded: !this.state.sideBarExpanded});\r\n  }\r\n\r\n  render() {\r\n\r\n    let el;\r\n    //console.log(\"rendered\");\r\n    switch (this.state.section)\r\n    {\r\n      case Section.CALEIDONOTE:\r\n        el = <Caleidonote/>;\r\n        break;\r\n      case Section.BINAURAL:\r\n        el = <Binaural/>; break;\r\n      case Section.CV:\r\n        el = <CV/>;\r\n        break;\r\n      case Section.INTRO:\r\n        el = <Intro/>;\r\n        break;\r\n    }    \r\n\r\n    let buttons : any[] = [];\r\n    Object.keys(Section).forEach( key => {\r\n        let val = Section[key as any] as Section;\r\n        let className = \"barItem button\";\r\n        if (val == this.state.section)\r\n        {\r\n          className += \" current\";\r\n        }\r\n        buttons.push(\r\n          <a key={key} className={className} onClick={((event: any) => this.switchTo(val)) }>{val}</a>\r\n        )\r\n      }\r\n    );\r\n \r\n    let sideBarClass = \"sideBar\";\r\n    let expandButton = \"button expandButton\";\r\n    if (!this.state.sideBarExpanded)\r\n    {\r\n      sideBarClass += \" collapsed\";\r\n      expandButton += \" collapsedButton\";\r\n    }\r\n    return (\r\n      <div className=\"wholeApp\">\r\n        <div className={sideBarClass}>\r\n          <h3 className=\"barItem\">Menu</h3>\r\n          {buttons.map(bt => bt)}\r\n        </div>\r\n        <div className=\"appbody\">\r\n        <a className={expandButton} onClick={((event: any) => this.toggleCollapse())}>\r\n            {this.state.sideBarExpanded ? <FaAngleLeft/>:<FaAngleRight/>}\r\n        </a>\r\n        {el}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import * as React from 'react';\r\n\r\nclass CV extends React.Component {\r\n    render()\r\n    {\r\n        return <div>TEST CV</div>;\r\n    }\r\n}\r\n\r\nexport default CV;","import * as React from 'react';\r\n\r\nclass Binaural extends React.Component {\r\n    render()\r\n    {\r\n        return <div>TEST BINAURAL</div>;\r\n    }\r\n}\r\n\r\nexport default Binaural;","import * as React from 'react';\r\n\r\nclass Caleidonote extends React.Component {\r\n    render()\r\n    {\r\n        return <div>TEST CALEIDONOTE</div>;\r\n    }\r\n}\r\n\r\nexport default Caleidonote;","import * as React from 'react';\r\n\r\nclass Intro extends React.Component {\r\n    render() {\r\n        return (<div>\r\n            <h2> \r\n                Hi there\r\n            </h2>\r\n            <p>\r\n            This is my personal page where I'll put my stuff and my javascript pet projecs.<br/>\r\n            It's not meant to be a clean portfolio rather than some form of playground for me, as I'm getting\r\n            familiar with React and TypeScript.<br/>\r\n            I work as a Senior Software Engineer in Microsoft Dublin, in the Havok office.<br/>\r\n            I started programming when I was a tiny 9 year old, in GWBasic on\r\n            an 8086 and the fascination of writing and running a piece of code stuck with me for many years, eventually\r\n            turning into a profession.<br/>\r\n            Parallely to my love for coding, I have a long term relationship with music (also started when I was around the same age),\r\n            and pursued some sort of semi-professional career as a sax player. After moving to Ireland my programming side became\r\n            prevalent, but I'm trying to rekindle my musical side by playing in my spare time as much as possible. <br/>\r\n            <br/>\r\n            You'll find here a few projects I'm working on in bits and pieces. As you can see they are all music related.<br/>\r\n            <br/>\r\n            Normally I'm more funny than this, but this is just a template... I'll update it later on!<br/>\r\n            <br/>\r\n            Cheers,<br/>\r\n            Marco Francescangeli\r\n            </p>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Intro;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}